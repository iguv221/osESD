opt <- parse_and_mark(opt_parser)
parsed_params <- convert_params_to_parsed_args(opt)
print(length(parsed_params))
print(parsed_params)
# Measure time before running the detection
t1 <- Sys.time()
ex_data <- read.csv('ARIMA1_ber_1.csv')
ex_osESD_anoms <- auto_osESD(data=ex_data,parameters=parsed_params)
# Example usage with variable parameter lengths
custom_params <- list(WindowSizes = c(10, 20), MaxRs = c(5, 10, 15, 20), AnotherParam = c(1, 2))
parsed_params <- convert_params_to_parsed_args(custom_params)
print(length(parsed_params))
print(parsed_params)
# Measure time before running the detection
t1 <- Sys.time()
ex_data <- read.csv('ARIMA1_ber_1.csv')
ex_osESD_anoms <- auto_osESD(data=ex_data)
parameters <- list(WindowSizes = c(50,100,200), MaxRs = c(5, 10, 15))
# Measure time before running the detection
t1 <- Sys.time()
ex_data <- read.csv('ARIMA1_ber_1.csv')
ex_osESD_anoms <- auto_osESD(data=ex_data,parameters=parameters)
parameters <- list(WindowSizes = c(50,100,200), AndOr=c(1,0), Dwins=c(2,5,10,20), Rwins=c(4,5,10,30), MaxRs = c(4,5, 10, 30), Alphas = c(0.001,0.005,0.01,0.05))
# Measure time before running the detection
t1 <- Sys.time()
ex_data <- read.csv('ARIMA1_ber_1.csv')
ex_osESD_anoms <- auto_osESD(data=ex_data,parameters=parameters)
auto_osESD <- function(data, labeled=FALSE, parameter_learning_length=0.2,
parameters=parse_args(OptionParser(option_list = list())), weights=c(0, 0, 1, 0), min_max_switch=FALSE) {
input_parameters <- convert_params_to_parsed_args(parameters)
print(input_parameters)
tuning_results <- osESD_Detector_auto(database=data, data_label=labeled, weights=weights,
par_len=parameter_learning_length, parameters=input_parameters,
min_max_switch=min_max_switch)
pred_anoms <- grid_search_osESD(data=data$value, time=1:length(data$value),
full_size=length(data$value), init_size=tuning_results$params[2],
params=tuning_results$params)
pred_anoms_index <- which(pred_anoms == 1)
pred_anoms_index <- pred_anoms_index[pred_anoms_index > tuning_results$params[2]]
return(list(pred_anoms_index=pred_anoms_index, params=tuning_results$params))
}
# Measure time before running the detection
t1 <- Sys.time()
ex_data <- read.csv('ARIMA1_ber_1.csv')
ex_osESD_anoms <- auto_osESD(data=ex_data)
parameters <- list(WindowSizes = c(50,100,200), AndOr=c(1,0), Dwins=c(2,5,10,20), Rwins=c(4,5,10,30), MaxRs = c(4,5, 10, 30), Alphas = c(0.001,0.005,0.01,0.05))
# Measure time before running the detection
t1 <- Sys.time()
ex_data <- read.csv('ARIMA1_ber_1.csv')
ex_osESD_anoms <- auto_osESD(data=ex_data,parameters=parameters)
rm(list=ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
getwd()
library(optparse)
library(caret)
source('osESD_Detector_auto.R')
source('osESD_modules.R')
source('modules//data_functions.R')
source('modules//functions.R')
# Function to parse arguments and mark the list
parse_and_mark <- function(parser) {
args <- parse_args(parser)
attr(args, "parsed") <- TRUE
return(args)
}
# Check function to determine if a list is from parse_args
is_parsed_args <- function(x) {
is.list(x) && !is.null(attr(x, "parsed"))
}
convert_params_to_parsed_args <- function(custom_params) {
allowed_params <- c("WindowSizes", "AndOr", "MaxRs", "Dwins", "Rwins", "Alphas", "help")
if (is_parsed_args(custom_params)){
param_names <- gsub("^--", "", names(custom_params))
if (!all(param_names %in% allowed_params)) {
stop("One or more parameter names from parsed arguments are not allowed. Allowed names are: ", paste(allowed_params, collapse=", "))
}
return (custom_params)
}
if (!all(names(custom_params) %in% allowed_params)) {
stop("One or more parameter names are not allowed. Allowed names are: ", paste(allowed_params, collapse=", "))
}
option_list <- lapply(names(custom_params), function(key) {
default_value = unlist(custom_params[[key]])
make_option(c(sprintf("--%s", key)), type="double", default=default_value, action="store")
})
opt_parser <- OptionParser(option_list = option_list)
parsed_params <- parse_args(opt_parser, args = character())
return(parsed_params)
}
auto_osESD <- function(data, labeled=FALSE, parameter_learning_length=0.2,
parameters=parse_args(OptionParser(option_list = list())), weights=c(0, 0, 1, 0), min_max_switch=FALSE) {
input_parameters <- convert_params_to_parsed_args(parameters)
print(input_parameters)
tuning_results <- osESD_Detector_auto(database=data, data_label=labeled, weights=weights,
par_len=parameter_learning_length, parameters=input_parameters,
min_max_switch=min_max_switch)
pred_anoms <- grid_search_osESD(data=data$value, time=1:length(data$value),
full_size=length(data$value), init_size=tuning_results$params[2],
params=tuning_results$params)
pred_anoms_index <- which(pred_anoms == 1)
pred_anoms_index <- pred_anoms_index[pred_anoms_index > tuning_results$params[2]]
return(list(pred_anoms_index=pred_anoms_index, params=tuning_results$params))
}
# Measure time before running the detection
t1 <- Sys.time()
ex_data <- read.csv('ARIMA1_ber_1.csv')
ex_osESD_anoms <- auto_osESD(data=ex_data)
parameters <- list(WindowSizes = c(50,100,200), AndOr=c(1,0), Dwins=c(2,5,10,20), Rwins=c(4,5,10,30), MaxRs = c(4,5, 10, 30), Alphas = c(0.001,0.005,0.01,0.05))
# Measure time before running the detection
t1 <- Sys.time()
ex_data <- read.csv('ARIMA1_ber_1.csv')
ex_osESD_anoms <- auto_osESD(data=ex_data,parameters=parameters)
source('osESD_Detector_auto.R')
source('osESD_modules.R')
source('modules//data_functions.R')
source('modules//functions.R')
# Function to parse arguments and mark the list
parse_and_mark <- function(parser) {
args <- parse_args(parser)
attr(args, "parsed") <- TRUE
return(args)
}
# Check function to determine if a list is from parse_args
is_parsed_args <- function(x) {
is.list(x) && !is.null(attr(x, "parsed"))
}
convert_params_to_parsed_args <- function(custom_params) {
allowed_params <- c("WindowSizes", "AndOr", "MaxRs", "Dwins", "Rwins", "Alphas", "help")
if (is_parsed_args(custom_params)){
param_names <- gsub("^--", "", names(custom_params))
if (!all(param_names %in% allowed_params)) {
stop("One or more parameter names from parsed arguments are not allowed. Allowed names are: ", paste(allowed_params, collapse=", "))
}
return (custom_params)
}
if (!all(names(custom_params) %in% allowed_params)) {
stop("One or more parameter names are not allowed. Allowed names are: ", paste(allowed_params, collapse=", "))
}
option_list <- lapply(names(custom_params), function(key) {
default_value = unlist(custom_params[[key]])
make_option(c(sprintf("--%s", key)), type="double", default=default_value, action="store")
})
opt_parser <- OptionParser(option_list = option_list)
parsed_params <- parse_args(opt_parser, args = character())
return(parsed_params)
}
auto_osESD <- function(data, labeled=FALSE, parameter_learning_length=0.2,
parameters=parse_args(OptionParser(option_list = list())), weights=c(0, 0, 1, 0), min_max_switch=FALSE) {
input_parameters <- convert_params_to_parsed_args(parameters)
print(input_parameters)
tuning_results <- osESD_Detector_auto(database=data, data_label=labeled, weights=weights,
par_len=parameter_learning_length, parameters=input_parameters,
min_max_switch=min_max_switch)
pred_anoms <- grid_search_osESD(data=data$value, time=1:length(data$value),
full_size=length(data$value), init_size=tuning_results$params[2],
params=tuning_results$params)
pred_anoms_index <- which(pred_anoms == 1)
pred_anoms_index <- pred_anoms_index[pred_anoms_index > tuning_results$params[2]]
return(list(pred_anoms_index=pred_anoms_index, params=tuning_results$params))
}
parameters <- list(WindowSizes = c(50,100,200), AndOr=c(1,0), Dwins=c(2,5,10,20), Rwins=c(4,5,10,30), MaxRs = c(4,5, 10, 30), Alphas = c(0.001,0.005,0.01,0.05))
# Measure time before running the detection
t1 <- Sys.time()
ex_data <- read.csv('ARIMA1_ber_1.csv')
ex_osESD_anoms <- auto_osESD(data=ex_data,parameters=parameters)
t1 <- Sys.time()
ex_data <- read.csv('ARIMA1_ber_1.csv')
ex_osESD_anoms <- auto_osESD(data=ex_data,labeled=FALSE)
PRFTcalculator <- function(Reals, Preds, t1, t2) {
TP <- 0
TN <- 0
FP <- 0
FN <- 0
for (i in 1:length(Reals)) {
real <- Reals[i]
pred <- Preds[i]
if (real == 0 & pred == 0) { TN <- TN + 1 }
else if (real == 0 & pred == 1) { FP <- FP + 1 }
else if (real == 1 & pred == 0) { FN <- FN + 1 }
else { TP <- TP + 1 }
}
run_time <- as.numeric(difftime(t2, t1, units="secs"))
if (TP + FN == 0) {return(list('precision'=0,'recall'=0,'F1Score'=0,'Run_Time'=run_time))}
else if (TP + FN == 0) { P <- TP / (TP + FP); return(list('precision'=P,'recall'=0,'F1Score'=0,'Run_Time'=run_time)) }
else if (TP + FP == 0) { R <- TP / (TP + FN); return(list('precision'=0,'recall'=R,'F1Score'=0,'Run_Time'=run_time)) }
R <- TP / (TP + FN)
P <- TP / (TP + FP)
if (R + P == 0) { return(list('precision'=0,'recall'=0,'F1Score'=0,'Run_Time'=run_time)) }
F1 <- 2 * R * P / (R + P)
return(list('precision'=P,'recall'=R,'F1Score'=F1,'Run_Time'=run_time))
}
#
# # auto_osESD<-function(data,labeled=FALSE,parameter_learning_length=0.2,parameters=parse_args(OptionParser(option_list = list())),
# #                      weights=c(0, 0, 1, 0),min_max_switch=FALSE){
# #
# #   tuning_results <- osESD_Detector_auto(database=data,data_label=labeled,weights=weights,par_len=parameter_learning_length,
# #                                         parameters = parameters, min_max_switch=min_max_switch)
# #
# #   pred_anoms <- grid_search_osESD(data=data$value,time=1:length(data$value),
# #                                   full_size=length(data$value),init_size=tuning_results$params[2], params=tuning_results$params)
# #
# #   pred_anoms_index <- which(pred_anoms == 1)
# #   pred_anoms_index <- pred_anoms_index[pred_anoms_index > tuning_results$params[2]]
# #
# #   return(list(pred_anoms_index = pred_anoms_index, params = tuning_results$params))
# # }
#
#
# auto_osESD <- function(data, labeled=FALSE, parameter_learning_length=0.2,
#                        parameters=c(threshold=2.5, sensitivity=0.99, other_param=10),
#                        weights=c(0, 0, 1, 0), min_max_switch=FALSE) {
#
#   # Assuming osESD_Detector_auto and grid_search_osESD are functions you've defined elsewhere or are from a package.
#   tuning_results <- osESD_Detector_auto(database=data, data_label=labeled, weights=weights,
#                                         par_len=parameter_learning_length, parameters=parameters,
#                                         min_max_switch=min_max_switch)
#
#   pred_anoms <- grid_search_osESD(data=data$value, time=1:length(data$value),
#                                   full_size=length(data$value), init_size=tuning_results$params[2],
#                                   params=tuning_results$params)
#
#   pred_anoms_index <- which(pred_anoms == 1)
#   pred_anoms_index <- pred_anoms_index[pred_anoms_index > tuning_results$params[2]]
#
#   return(list(pred_anoms_index=pred_anoms_index, params=tuning_results$params))
# }
#
#
# auto_osESD <- function(data, labeled=FALSE, parameter_learning_length=0.2,
#                        parameters=NULL, weights=c(0, 0, 1, 0), min_max_switch=FALSE) {
#
#   # Define options
#   option_list <- list(
#     make_option(c("--WindowSizes"), type="double", default=c(50,100,150,200)),
#     make_option(c("--AndOr"), type="double", default=c(1,0)),
#     make_option(c("--MaxRs"), type="double", default=c(3,5,7,10)),
#     make_option(c("--Dwins"), type="double", default=c(2,5,10,30)),
#     make_option(c("--Rwins"), type="double", default=c(4,5,10,30)),
#     make_option(c("--Alphas"), type="double", default=c(0.001,0.005,0.01,0.05))
#   )
#
#   # Create parser
#   opt_parser <- OptionParser(option_list = option_list)
#
#   # Check if parameters are provided and parse if not already
#   if (is.null(parameters)) {
#     # Assuming no command line args, but setup for future expansion
#     args <- character()
#     parsed_params <- parse_args(opt_parser, args)
#   } else {
#     # Use provided parameters directly if already parsed or provided as a list
#     if (is.list(parameters)) {
#       parsed_params <- parameters
#     } else {
#       # Assuming parameters are passed as a character vector similar to command line args
#       parsed_params <- parse_args(opt_parser, args = parameters)
#     }
#   }
#
#   # Assuming osESD_Detector_auto and grid_search_osESD are functions you've defined elsewhere or are from a package.
#   tuning_results <- osESD_Detector_auto(database=data, data_label=labeled, weights=weights,
#                                         par_len=parameter_learning_length, parameters=parsed_params,
#                                         min_max_switch=min_max_switch)
#
#   pred_anoms <- grid_search_osESD(data=data$value, time=1:length(data$value),
#                                   full_size=length(data$value), init_size=tuning_results$params[2],
#                                   params=tuning_results$params)
#
#   pred_anoms_index <- which(pred_anoms == 1)
#   pred_anoms_index <- pred_anoms_index[pred_anoms_index > tuning_results$params[2]]
#
#   return(list(pred_anoms_index=pred_anoms_index, params=tuning_results$params))
# }
#
#
#
rm(list=ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
getwd()
library(optparse)
library(caret)
# library(devtools)
# devtools::install_github("iguv221/osESD",force=TRUE)
# library(osESD)
#
# osESD
# auto_osESD
source('osESD_Detector_auto.R')
source('osESD_modules.R')
source('modules//data_functions.R')
source('modules//functions.R')
PRFTcalculator <- function(Reals, Preds, t1, t2) {
TP <- 0
TN <- 0
FP <- 0
FN <- 0
for (i in 1:length(Reals)) {
real <- Reals[i]
pred <- Preds[i]
if (real == 0 & pred == 0) { TN <- TN + 1 }
else if (real == 0 & pred == 1) { FP <- FP + 1 }
else if (real == 1 & pred == 0) { FN <- FN + 1 }
else { TP <- TP + 1 }
}
run_time <- as.numeric(difftime(t2, t1, units="secs"))
if (TP + FN == 0) {return(list('precision'=0,'recall'=0,'F1Score'=0,'Run_Time'=run_time))}
else if (TP + FN == 0) { P <- TP / (TP + FP); return(list('precision'=P,'recall'=0,'F1Score'=0,'Run_Time'=run_time)) }
else if (TP + FP == 0) { R <- TP / (TP + FN); return(list('precision'=0,'recall'=R,'F1Score'=0,'Run_Time'=run_time)) }
R <- TP / (TP + FN)
P <- TP / (TP + FP)
if (R + P == 0) { return(list('precision'=0,'recall'=0,'F1Score'=0,'Run_Time'=run_time)) }
F1 <- 2 * R * P / (R + P)
return(list('precision'=P,'recall'=R,'F1Score'=F1,'Run_Time'=run_time))
}
# Function to parse arguments and mark the list
parse_and_mark <- function(parser) {
args <- parse_args(parser)
attr(args, "parsed") <- TRUE
return(args)
}
# Check function to determine if a list is from parse_args
is_parsed_args <- function(x) {
is.list(x) && !is.null(attr(x, "parsed"))
}
convert_params_to_parsed_args <- function(custom_params) {
allowed_params <- c("WindowSizes", "AndOr", "MaxRs", "Dwins", "Rwins", "Alphas", "help")
if (is_parsed_args(custom_params)){
param_names <- gsub("^--", "", names(custom_params))
if (!all(param_names %in% allowed_params)) {
stop("One or more parameter names from parsed arguments are not allowed. Allowed names are: ", paste(allowed_params, collapse=", "))
}
return (custom_params)
}
if (!all(names(custom_params) %in% allowed_params)) {
stop("One or more parameter names are not allowed. Allowed names are: ", paste(allowed_params, collapse=", "))
}
option_list <- lapply(names(custom_params), function(key) {
default_value = unlist(custom_params[[key]])
make_option(c(sprintf("--%s", key)), type="double", default=default_value, action="store")
})
opt_parser <- OptionParser(option_list = option_list)
parsed_params <- parse_args(opt_parser, args = character())
return(parsed_params)
}
auto_osESD <- function(data, labeled=FALSE, parameter_learning_length=0.2,
parameters=parse_args(OptionParser(option_list = list())), weights=c(0, 0, 1, 0), min_max_switch=FALSE) {
input_parameters <- convert_params_to_parsed_args(parameters)
print(input_parameters)
tuning_results <- osESD_Detector_auto(database=data, data_label=labeled, weights=weights,
par_len=parameter_learning_length, parameters=input_parameters,
min_max_switch=min_max_switch)
pred_anoms <- grid_search_osESD(data=data$value, time=1:length(data$value),
full_size=length(data$value), init_size=tuning_results$params[2],
params=tuning_results$params)
pred_anoms_index <- which(pred_anoms == 1)
pred_anoms_index <- pred_anoms_index[pred_anoms_index > tuning_results$params[2]]
return(list(pred_anoms_index=pred_anoms_index, params=tuning_results$params))
}
# t1 <- Sys.time()
# ex_data <- read.csv('ARIMA1_ber_1.csv')
# ex_osESD_anoms <- auto_osESD(data=ex_data)
# t2 <- Sys.time()
#
#
#
# parameters <- list(WindowSizes = c(50,100,200), AndOr=c(1,0), Dwins=c(2,5,10,20), Rwins=c(4,5,10,30), MaxRs = c(4,5, 10, 30), Alphas = c(0.001,0.005,0.01,0.05))
# t1 <- Sys.time()
# ex_data <- read.csv('ARIMA1_ber_1.csv')
# ex_osESD_anoms <- auto_osESD(data=ex_data,parameters=parameters)
# t2 <- Sys.time()
#
#
#
# t1 <- Sys.time()
# ex_data <- read.csv('ARIMA1_ber_1.csv')
# ex_osESD_anoms <- auto_osESD(data=ex_data,labeled=FALSE)
# t2 <- Sys.time()
data_name <- "ARIMA1_ber_1.csv"
ex_data <- read.csv(data_name, header=TRUE)
labeled<-TRUE
t1<-Sys.time()
ex_auto_osESD_anoms_1<-run_auto_osESD(data=ex_data,labeled=labeled)
ex_auto_osESD_anoms_1<-auto_osESD(data=ex_data,labeled=labeled)
dir_path <- "auto_osESD_results//"
if (!file.exists(dir_path)) {
dir.create(dir_path)
cat("Directory created:", dir_path, "\n")
} else {
cat("Directory already exists:", dir_path, "\n")
}
ex_opt_list <- list(
make_option(c("--WindowSizes"), type="double", default=c(50,200)),
make_option(c("--AndOr"), type="double", default=c(1,0)),
make_option(c("--MaxRs"), type="double", default=c(3,20)),
make_option(c("--Dwins"), type="double", default=c(2,30)),
make_option(c("--Rwins"), type="double", default=c(4,30)),
make_option(c("--Alphas"), type="double", default=c(0.001,0.05)))
ex_opt <- parse_args(OptionParser(option_list = ex_opt_list))
labeled<-TRUE
min_max_switch<-TRUE
ex_weights<-c(0,0,1,0.1)
t1<-Sys.time()
ex_auto_osESD_anoms_2<-run_auto_osESD(data=ex_data,labeled=labeled,parameters=ex_opt,weights=ex_weights,min_max_switch = min_max_switch)
ex_auto_osESD_anoms_2<-auto_osESD(data=ex_data,labeled=labeled,parameters=ex_opt,weights=ex_weights,min_max_switch = min_max_switch)
rm(list=ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
getwd()
library(optparse)
library(caret)
source('osESD_Detector_auto.R')
source('osESD_modules.R')
source('modules//data_functions.R')
source('modules//functions.R')
PRFTcalculator <- function(Reals, Preds, t1, t2) {
TP <- 0
TN <- 0
FP <- 0
FN <- 0
for (i in 1:length(Reals)) {
real <- Reals[i]
pred <- Preds[i]
if (real == 0 & pred == 0) { TN <- TN + 1 }
else if (real == 0 & pred == 1) { FP <- FP + 1 }
else if (real == 1 & pred == 0) { FN <- FN + 1 }
else { TP <- TP + 1 }
}
run_time <- as.numeric(difftime(t2, t1, units="secs"))
if (TP + FN == 0) {return(list('precision'=0,'recall'=0,'F1Score'=0,'Run_Time'=run_time))}
else if (TP + FN == 0) { P <- TP / (TP + FP); return(list('precision'=P,'recall'=0,'F1Score'=0,'Run_Time'=run_time)) }
else if (TP + FP == 0) { R <- TP / (TP + FN); return(list('precision'=0,'recall'=R,'F1Score'=0,'Run_Time'=run_time)) }
R <- TP / (TP + FN)
P <- TP / (TP + FP)
if (R + P == 0) { return(list('precision'=0,'recall'=0,'F1Score'=0,'Run_Time'=run_time)) }
F1 <- 2 * R * P / (R + P)
return(list('precision'=P,'recall'=R,'F1Score'=F1,'Run_Time'=run_time))
}
auto_osESD <- function(data, labeled=FALSE, parameter_learning_length=0.2,
parameters=parse_args(OptionParser(option_list = list())), weights=c(0, 0, 1, 0), min_max_switch=FALSE) {
input_parameters <- convert_params_to_parsed_args(parameters)
tuning_results <- osESD_Detector_auto(database=data, data_label=labeled, weights=weights,
par_len=parameter_learning_length, parameters=input_parameters,
min_max_switch=min_max_switch)
pred_anoms <- grid_search_osESD(data=data$value, time=1:length(data$value),
full_size=length(data$value), init_size=tuning_results$params[2],
params=tuning_results$params)
pred_anoms_index <- which(pred_anoms == 1)
pred_anoms_index <- pred_anoms_index[pred_anoms_index > tuning_results$params[2]]
return(list(pred_anoms_index=pred_anoms_index, params=tuning_results$params))
}
auto_osESD <- function(data, labeled=FALSE, parameter_learning_length=0.2,
parameters=parse_args(OptionParser(option_list = list())), weights=c(0, 0, 1, 0), min_max_switch=FALSE) {
input_parameters <- convert_params_to_parsed_args(parameters)
tuning_results <- osESD_Detector_auto(database=data, data_label=labeled, weights=weights,
par_len=parameter_learning_length, parameters=input_parameters,
min_max_switch=min_max_switch)
pred_anoms <- grid_search_osESD(data=data$value, time=1:length(data$value),
full_size=length(data$value), init_size=tuning_results$params[2],
params=tuning_results$params)
pred_anoms_index <- which(pred_anoms == 1)
pred_anoms_index <- pred_anoms_index[pred_anoms_index > tuning_results$params[2]]
return(list(pred_anoms_index=pred_anoms_index, params=tuning_results$params))
}
data_name <- "ARIMA1_ber_1.csv"
ex_data <- read.csv(data_name, header=TRUE)
labeled<-TRUE
t1<-Sys.time()
ex_auto_osESD_anoms_1<-auto_osESD(data=ex_data,labeled=labeled)
rm(list=ls())
library(devtools)
library(roxygen2)
setwd("C:/Users/jisung/OneDrive - 연세대학교 (Yonsei University)/문서/testing")
getwd()
rm(list=ls())
library(devtools)
library(roxygen2)
setwd("C:/Users/jisung/OneDrive - 연세대학교 (Yonsei University)/문서/osESD/R")
getwd()
document()
check()
build()
rm(list=ls())
library(devtools)
devtools::install_github("iguv221/osESD",force=TRUE)
library(osESD)
osESD
auto_osESD
rm(list=ls())
library(devtools)
library(roxygen2)
setwd("C:/Users/jisung/OneDrive - 연세대학교 (Yonsei University)/문서/osESD/R")
getwd()
document()
check()
build()
library(devtools)
devtools::install_github("iguv221/osESD",force=TRUE)
library(osESD)
osESD
auto_osESD
rm(list=ls())
library(devtools)
library(roxygen2)
setwd("C:/Users/jisung/OneDrive - 연세대학교 (Yonsei University)/문서/osESD/R")
getwd()
document()
check()
build()
library(devtools)
devtools::install_github("iguv221/osESD",force=TRUE)
library(osESD)
osESD
auto_osESD
